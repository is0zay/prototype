public String getCurrentUsername() {
    // First, try to get the username from the SecurityContextHolder
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    if (authentication != null) {
        return authentication.getName();
    }

    // If the SecurityContextHolder doesn't have the username, try to get it from the cookie
    String cookieValue = getCookieValue("jwt_auth");
    if (cookieValue != null) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, String> authData = objectMapper.readValue(cookieValue, Map.class);
            return authData.get("username");
        } catch (JsonProcessingException e) {
            // Handle the exception appropriately
            e.printStackTrace();
        }
    }

    return null;
}


value = { "/", "/{x:[\\w\\-]+}", "/**/{x:[\\w\\-]+}" })


<label for="name">Name:</label>
  <input type="text" id="name" formControlName="name" required><br><br>

  <label for="email">Email:</label>
  <input type="email" id="email" formControlName="email" required><br><br>

  <label for="password">Password:</label>
  <input type="password" id="password" formControlName="password" required><br><br>

  <label for="age">Age:</label>
  <input type="number" id="age" formControlName="age" min="0" max="120"><br><br>

  <label for="birthdate">Birthdate:</label>
  <input type="date" id="birthdate" formControlName="birthdate"><br><br>

  <label for="favorite-color">Favorite Color:</label>
  <input type="color" id="favorite-color" formControlName="favoriteColor"><br><br>

  <label for="satisfaction">Satisfaction Level:</label>
  <input type="range" id="satisfaction" formControlName="satisfaction" min="0" max="10"><br><br>

  <label>Gender:</label><br>
  <input type="radio" id="male" formControlName="gender" value="male">
  <label for="male">Male</label><br>
  <input type="radio" id="female" formControlName="gender" value="female">
  <label for="female">Female</label><br>
  <input type="radio" id="other" formControlName="gender" value="other">
  <label for="other">Other</label><br><br>

  <label>Interests:</label><br>
  <input type="checkbox" id="sports" formControlName="interests" value="sports">
  <label for="sports">Sports</label><br>
  <input type="checkbox" id="music" formControlName="interests" value="music">
  <label for="music">Music</label><br>
  <input type="checkbox" id="reading" formControlName="interests" value="reading">
  <label for="reading">Reading</label><br><br>

  <label for="country">Country:</label>
  <select id="country" formControlName="country">
    <option value="">Select a country</option>
    <option value="usa">United States</option>
    <option value="uk">United Kingdom</option>
    <option value="canada">Canada</option>
    <option value="australia">Australia</option>
  </select><br><br>

  <label for="comments">Comments:</label><br>
  <textarea id="comments" formControlName="comments" rows="4" cols="50"></textarea><br><br>

  <button type="submit">Submit</button>
  <button type="button" (click)="resetForm()">Reset</button>

  <button type="button" (click)="generatePdf()">Generate PDF</button>
  <input type="file" (change)="parsePdf($event.target.files)" />



  constructor(private fb: FormBuilder, private pdfService: PdfService) {
    this.form = this.fb.group({
      name: ['', Validators.required],
      email: ['', Validators.required],
      password: ['', Validators.required],
      age: [''],
      birthdate: [''],
      favoriteColor: [''],
      satisfaction: [''],
      gender: [''],
      interests: [''],
      country: [''],
      comments: ['']
    });
  }

  ngOnInit(): void {}

  onSubmit() {
    console.log(this.form.value);
  }

  resetForm() {
    this.form.reset();
  }

  async generatePdf() {
    const formData = this.form.value;
    await this.pdfService.generatePdf(formData, this.formSchema);
  }

  async parsePdf(files: FileList | null) {
    if (files && files.length > 0) {
      const formData = await this.pdfService.parsePdf(files[0]);
      this.form.patchValue(formData);
    }
  }

  // Define the form schema
  formSchema = [
    { type: 'text', label: 'Name', name: 'name' },
    { type: 'email', label: 'Email', name: 'email' },
    { type: 'password', label: 'Password', name: 'password' },
    { type: 'number', label: 'Age', name: 'age' },
    { type: 'date', label: 'Birthdate', name: 'birthdate' },
    { type: 'color', label: 'Favorite Color', name: 'favoriteColor' },
    { type: 'range', label: 'Satisfaction Level', name: 'satisfaction' },
    { type: 'radio', label: 'Gender', name: 'gender', options: ['male', 'female', 'other'] },
    { type: 'checkbox', label: 'Interests', name: 'interests', options: ['sports', 'music', 'reading'] },
    { type: 'select', label: 'Country', name: 'country', options: ['usa', 'uk', 'canada', 'australia'] },
    { type: 'textarea', label: 'Comments', name: 'comments' }
  ];
}
Step 3: PDF Service
Ensure the pdf.service.ts file exists and contains the necessary logic:

typescript
Copy code
// pdf.service.ts
import { Injectable } from '@angular/core';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class PdfService {
  constructor(private http: HttpClient) {}

  async generatePdf(formData: any, formSchema: any[]): Promise<Uint8Array> {
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const { height } = page.getSize();

    let yPosition = height - 30;
    formSchema.forEach(field => {
      page.drawText(`${field.label}: ${formData[field.name]}`, {
        x: 30,
        y: yPosition,
        size: 12,
        font,
        color: rgb(0, 0, 0),
      });
      yPosition -= 20;
    });

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: 'application/pdf' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'form.pdf';
    a.click();
    URL.revokeObjectURL(url);
    return pdfBytes;
  }

  async parsePdf(file: File): Promise<any> {
    const arrayBuffer = await file.arrayBuffer();
    const pdfDoc = await PDFDocument.load(arrayBuffer);
    const form = pdfDoc.getForm();
    const formFields = form.getFields();
    const formData: any = {};

    formFields.forEach(field => {
      const fieldName = field.getName();
      if (field.constructor.name === 'PDFTextField') {
        formData[fieldName] = (field as any).getText();
      } else if (field.constructor.name === 'PDFCheckBox') {
        formData[fieldName] = (field as any).isChecked();
      } else if (field.constructor.name === 'PDFRadioGroup') {
        formData[fieldName] = (field as any).getSelected();
      } else if (field.constructor.name === 'PDFDropdown') {
        formData[fieldName] = (field as any).getSelected();
      }
    });

    return formData;
  }
}
